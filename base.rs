let 绑定
1.在Rust中通过 let 来绑定标识符的值
2.Rust是静态类型语言，需要先确定我们需要的类型，在Rust中有类型推断的功能，能确定这是什么类型，不需要明确的指出来。
3.值得绑定默认是不可变的，需要通过mut来绑定标识符来确定值是可变的。
4.在Rust中标识符必须要初始化，Rust 是不会让我们使用一个没有经过初始化的值的。
  let x = 5;  //不可变
  let mut x = 5;  //可变
当然也可以明确的指出来，只需要在将类型卸载（:）后面。
  let x:i32 = 5;

函数
1.在Rust中使用 fn 来声明函数。
2.函数的参数必须声明类型。
3.使用 -> 符号来声明函数的返回值，且函数的返回值只能有一个。
4.在下面函数中 x + y 当作函数的返回值，注意 x + y 后面并没有分号（；），如果加有分号，则是一个表达式语句，不能作为一个表达式当作函数的返回值。
  fn print(x:i32, y: i32) -> i32{
      x + y
  }

语句与表达式
1.变量声明语句：主要是指 let 语句。
2.ltem语句：是指函数（function）、结构体（structure）、类型别名（type）、静态变量（static）、特质（trait）、实现（implementation）或模块（module）的声明。这些声明可以嵌套在任意块（block）中。
3.表达式语句：由一个表达式和一个分号组成，即在表达式后面加一个分号就将一个表达式转变为了一个语句。所以，有多少种表达式，就有多少种表达式语句。
4.语句始终返回一个()，这是一个 unit 类型。

函数指针
  fn plus_one(i: i32) -> i32 { i + 1 }
  let f = plus_one;
  let six = f(5);
